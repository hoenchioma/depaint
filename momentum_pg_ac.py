import copy

import numpy as np
import torch
import torch.nn as nn
import torch.nn.functional as F

from nets import PolicyNet, ValueNet

class MomentumPG:
    """ momentum-based PG algorithm """
    def __init__(self, num_agents, state_dim, action_dim, lmbda, critic_lr, gamma, device, min_isw, beta):
        state_dim = state_dim
        action_dim = action_dim
        self.num_agents = num_agents
        self.actors = []
        for _ in range(self.num_agents):
            self.actors.append(PolicyNet(state_dim, action_dim).to(device))
        self.obj_critic = ValueNet(state_dim).to(device)
        self.obj_critic_optim = torch.optim.Adam(self.obj_critic.parameters(), lr=critic_lr)
        self.util_critic = ValueNet(state_dim).to(device)
        self.util_critic_optim = torch.optim.Adam(self.util_critic.parameters(), lr=critic_lr)
        self.critics = [self.obj_critic, self.util_critic]
        self.critic_optims = [self.obj_critic_optim, self.util_critic_optim]
        self.dual_param = torch.zeros(1).to(device)
        self.gamma = gamma  # discount factor
        self.lmbda = lmbda  # lambda for GAE
        self.device = device
        self.min_isw = min_isw  # minimum importance weight
        self.beta = beta  # beta for momentum-based variance reduction

    def take_actions(self, state):
        """Giving a state, take an action using policy network."""
        state = torch.tensor([state], dtype=torch.float).to(self.device)
        actions = []
        for actor in self.actors:
            probs = actor(state)
            action_dist = torch.distributions.Categorical(probs)
            action = action_dist.sample()
            actions.append(action)
        return actions

    def calc_log_probs(self, transition_dict):
        """Giving a transition dictionary, calculate log propobilites for a policy."""
        states = torch.tensor(transition_dict['states'], dtype=torch.float).to(self.device)
        actions_list = torch.tensor(transition_dict['actions']).T.to(self.device)
        old_log_probs_list = []
        log_probs_list = []
        for idx, actor in enumerate(self.actors):
            old_log_probs = torch.log(actor(states).gather(1, actions_list[idx].unsqueeze(1))).detach()
            old_log_probs_list.append(old_log_probs)
            log_probs = torch.log(actor(states).gather(1, actions_list[idx].unsqueeze(1)))
            log_probs_list.append(log_probs)
        return old_log_probs_list, log_probs_list

    def compute_grads(self, advantages, old_log_probs_list, log_probs_list):
        """Calculate gradients for the objective function and the utility function."""
        grad_lists = []
        for idx, advantage in enumerate(advantages):
            grad_list = []
            for actor, old_log_probs, log_probs in zip(self.actors, old_log_probs_list, log_probs_list):
                ratio = torch.exp(log_probs - old_log_probs)
                surrogate_obj = torch.mean(ratio * advantage)
                grads = torch.autograd.grad(surrogate_obj, actor.parameters(), retain_graph=(idx < len(advantages) - 1))
                grads = torch.cat([grad.view(-1) for grad in grads]).detach()
                grad_list.append(grads)
            grad_lists.append(grad_list)
        return grad_lists

    def compute_IS_weight(self, actions_list, states, phis, min_isw):
        """Calculate the importance weight."""
        probs_list = []
        old_probs_list = []
        for idx, (actor, phi) in enumerate(zip(self.actors, phis)):
            probs = actor(states).gather(1, actions_list[idx].unsqueeze(1)).detach()
            probs_list.append(probs)
            old_policy_probs = phi(states).gather(1, actions_list[idx].unsqueeze(1)).detach()
            old_probs_list.append(old_policy_probs)

        probs_list_t = torch.stack(probs_list).squeeze()
        old_policy_probs_t = torch.stack(old_probs_list).squeeze()
        prod_probs = torch.prod(probs_list_t, dim=0)
        prod_old_probs = torch.prod(old_policy_probs_t, dim=0)
        weights = prod_old_probs / (prod_probs + 1e-8)
        weight = torch.prod(weights)
        weight = np.max((min_isw, weight.cpu().numpy()))
        weight_list = [weight for _ in self.actors]
        return weight_list

    def compute_grad_traj_prev_weights(self, states, actions_list, phis, advantage, retain_graph):
        """Calculate gradients of old policy using the trajectory generated by new policy."""
        obj_grad_list = []
        for idx, phi in enumerate(phis):
            old_policy_log_probs = torch.log(phi(states).gather(1, actions_list[idx].unsqueeze(1))).detach()
            log_probs = torch.log(phi(states).gather(1, actions_list[idx].unsqueeze(1)))
            ratio = torch.exp(log_probs - old_policy_log_probs)
            old_policy_surrogate_obj = torch.mean(ratio * advantage)
            grads = torch.autograd.grad(old_policy_surrogate_obj, phi.parameters(), retain_graph=retain_graph)
            obj_grad = torch.cat([grad.view(-1) for grad in grads]).detach()
            obj_grad_list.append(obj_grad)
        return obj_grad_list

    def compute_v_list(self, transition_dict, advantages, prev_v_list, phis, beta):
        """Generate gradient estimator based on momentum-based variance reduction."""
        old_log_probs_list, log_probs_list = self.calc_log_probs(transition_dict)
        states = torch.tensor(transition_dict['states'], dtype=torch.float).to(self.device)
        actions_list = torch.tensor(transition_dict['actions']).T.to(self.device)

        isw_list = self.compute_IS_weight(actions_list, states, phis, self.min_isw)
        grad_lists = self.compute_grads(advantages, old_log_probs_list, log_probs_list)
        grad_v_lists = []
        for idx, (advantage, grad_list) in enumerate(zip(advantages, grad_lists)):
            prev_g_list = self.compute_grad_traj_prev_weights(states, actions_list, phis, advantage, idx < len(advantages) - 1)
            grad_v_list = []
            for grad, prev_v, prev_g, isw in zip(grad_list, prev_v_list, prev_g_list, isw_list):
                grad_v = beta * grad + (1 - beta) * (prev_v + grad - isw * prev_g)
                grad_v_list.append(grad_v)
            grad_v_lists.append(grad_v_list)
        return grad_v_lists

    def update_value(self, transition_dict):
        """Update value network and calculate advantage functions."""
        states = torch.tensor(transition_dict['states'],
                              dtype=torch.float).to(self.device)
        # rewards = torch.tensor(transition_dict['rewards'],
        #                        dtype=torch.float).view(-1, 1).to(self.device)
        obj_rewards = torch.tensor(transition_dict['obj_rewards'],
                                   dtype=torch.float).view(-1, 1).to(self.device)
        util_rewards = torch.tensor(transition_dict['util_rewards'],
                                    dtype=torch.float).view(-1, 1).to(self.device)
        next_states = torch.tensor(transition_dict['next_states'],
                                   dtype=torch.float).to(self.device)
        dones = torch.tensor(transition_dict['dones'],
                             dtype=torch.float).view(-1, 1).to(self.device)

        advantages = []                     
        for rewards, critic, critic_optim in zip([obj_rewards, util_rewards], self.critics, self.critic_optims):
            td_target = rewards + self.gamma * critic(next_states) * (1 - dones)
            td_delta = td_target - critic(states)
            critic_loss = torch.mean(F.mse_loss(critic(states), td_target.detach()))
            critic_optim.zero_grad()
            critic_loss.backward()
            critic_optim.step()
    
            advantage = compute_advantage(self.gamma, self.lmbda, td_delta.cpu()).to(self.device)
            advantages.append(advantage)
        
        return advantages

    def update_dual_param(self, disc_util_return, dual_lr, constraint):
        """Update dual parameters (via projected gradient descent)."""
        
        self.dual_param = self.dual_param - dual_lr * (disc_util_return - constraint)
        self.dual_param = F.relu(self.dual_param) # Project onto non-negative orthant

        


def take_param_consensus(agents, pi):
    """Take parameters consensus."""
    layer_1_w_lists = []
    layer_1_b_lists = []
    layer_2_w_lists = []
    layer_2_b_lists = []
    layer_3_w_lists = []
    layer_3_b_lists = []
    for i in range(len(agents)):
        layer_1_w = []
        layer_1_b = []
        layer_2_w = []
        layer_2_b = []
        layer_3_w = []
        layer_3_b = []
        for j in range(len(agents)):
            layer_1_w.append(agents[j].actors[i].dense1.weight.data)
            layer_1_b.append(agents[j].actors[i].dense1.bias.data)
            layer_2_w.append(agents[j].actors[i].dense2.weight.data)
            layer_2_b.append(agents[j].actors[i].dense2.bias.data)
            layer_3_w.append(agents[j].actors[i].dense3.weight.data)
            layer_3_b.append(agents[j].actors[i].dense3.bias.data)

        layer_1_w_lists.append(layer_1_w)
        layer_1_b_lists.append(layer_1_b)
        layer_2_w_lists.append(layer_2_w)
        layer_2_b_lists.append(layer_2_b)
        layer_3_w_lists.append(layer_3_w)
        layer_3_b_lists.append(layer_3_b)

    for agent_idx, agent in enumerate(agents):
        agent_pi = torch.tensor(pi[agent_idx], device=agent.device)
        for i, actor in enumerate(agent.actors):
            actor.dense1.weight.data = torch.sum(
                torch.stack(tuple(layer_1_w_lists[i])) * agent_pi.unsqueeze(-1).unsqueeze(-1), 0).clone()
            actor.dense1.bias.data = torch.sum(torch.stack(tuple(layer_1_b_lists[i])) * agent_pi.unsqueeze(-1), 0).clone()

            actor.dense2.weight.data = torch.sum(
                torch.stack(tuple(layer_2_w_lists[i])) * agent_pi.unsqueeze(-1).unsqueeze(-1), 0).clone()
            actor.dense2.bias.data = torch.sum(torch.stack(tuple(layer_2_b_lists[i])) * agent_pi.unsqueeze(-1), 0).clone()

            actor.dense3.weight.data = torch.sum(
                torch.stack(tuple(layer_3_w_lists[i])) * agent_pi.unsqueeze(-1).unsqueeze(-1), 0).clone()
            actor.dense3.bias.data = torch.sum(torch.stack(tuple(layer_3_b_lists[i])) * agent_pi.unsqueeze(-1), 0).clone()
    '''
    # TEST: When topo is dense, nums=[0]
    numss = []
    for agent in agents:
        nums = []
        for idx, actor in enumerate(agent.actors):
            a = torch.nn.utils.convert_parameters.parameters_to_vector(actor.parameters())
            b = torch.nn.utils.convert_parameters.parameters_to_vector(agents[4].actors[idx].parameters())
            num = np.linalg.norm(a.detach().numpy() - b.detach().numpy(), 2)
            nums.append(num)
        numss.append(nums)
    print(numss)
    '''
    return agents


def take_grad_consensus(grad_lists, pi):
    """Take gradient consensus."""
    re_grad_lists = []
    for i in range(len(grad_lists)):  # for the i-th copy in all agents
        re_grad_list = []
        for j in range(len(grad_lists)):
            re_grad_list.append(grad_lists[j][i])
        re_grad_lists.append(re_grad_list)

    consensus_grad_lists = []
    for idx in range(len(grad_lists)):
        consensus_grad_list = []
        for i in range(len(grad_lists)):  # the i-th copy for idx-agent
            tmp1 = torch.stack(tuple(re_grad_lists[i]))
            tmp2 = torch.tensor(pi[idx], device=tmp1.device).unsqueeze(-1)
            grads = torch.sum(tmp1 * tmp2, 0).clone()
            consensus_grad_list.append(grads)
        consensus_grad_lists.append(consensus_grad_list)
    return consensus_grad_lists


def update_y_lists(y_lists, prev_v_lists, v_lists):
    """Update gradient estimator y^{t+1} using gradient tracking."""
    next_y_lists = []
    for y_list, prev_v_list, v_list in zip(y_lists, prev_v_lists, v_lists):
        next_y_list = []
        for y, prev_v, v in zip(y_list, prev_v_list, v_list):
            y_new = y + v - prev_v
            next_y_list.append(y_new)
        next_y_lists.append(next_y_list)
    return next_y_lists


def update_param(agent, v_k_list, lr=3e-4, clip_grad=1.0):
    """update parameters for an agent"""
    for idx, actor in enumerate(agent.actors):
        old_para = torch.nn.utils.convert_parameters.parameters_to_vector(actor.parameters())
        new_para = old_para + lr * torch.clamp(v_k_list[idx], -clip_grad, clip_grad)
        torch.nn.utils.convert_parameters.vector_to_parameters(new_para, actor.parameters())


def compute_advantage(gamma, lmbda, td_delta):
    """Calculate advantage function using GAE."""
    td_delta = td_delta.detach().numpy()
    advantage_list = []
    advantage = 0.0
    for delta in td_delta[::-1]:
        advantage = gamma * lmbda * advantage + delta
        advantage_list.append(advantage)
    advantage_list.reverse()
    return torch.tensor(advantage_list, dtype=torch.float)


def initialization_gt(sample_envs, agents, pi, lr=3e-4, minibatch_size=1, max_eps_len=20, algo='pg', clip_grad=1.0):
    """Initialization for traning agents."""
    prev_v_lists, y_lists = [], []
    states_lists = []  # list of states for all agents
    
    for idx, (agent, sample_env) in enumerate(zip(agents, sample_envs)):
        minibatch_grads_n = []
        states_list = []  # list of states for each agent
        print("Initializing for " + f"agent {idx}" + "...")
        for i in range(minibatch_size):
            # episode_return = 0
            episode_obj_return = 0
            episode_util_return = 0
            # transition_dict = {'states': [], 'actions': [], 'next_states': [], 'rewards': [], 'dones': []}
            transition_dict = {'states': [], 'actions': [], 'next_states': [], 'obj_rewards': [], 'util_rewards': [], 'dones': []}
            state = sample_env.reset()
            state = np.concatenate(state).ravel()
            for t in range(max_eps_len):
                if algo == 'npg':
                    states_list.append(state)               
                actions = agent.take_actions(state)
                next_state, rewards, dones, _ = sample_env.step(actions)
                next_state = np.concatenate(next_state).ravel()
                done = all(item == True for item in dones)
                transition_dict['states'].append(state)
                transition_dict['actions'].append(actions)
                transition_dict['next_states'].append(next_state)
                # transition_dict['rewards'].append(rewards)
                transition_dict['obj_rewards'].append(rewards[idx][0])
                transition_dict['util_rewards'].append(rewards[idx][1])
                transition_dict['dones'].append(dones[idx])
                state = next_state
                # episode_return += rewards[idx]
                episode_obj_return += rewards[idx][0]
                episode_util_return += rewards[idx][1]
                reset = t == max_eps_len - 1
                if done or reset:
                    print("Agent "+ str(idx) + ': Batch Initial Trajectory ' + str(i) + ': { Reward (Obj):', episode_obj_return, 'Reward (Util):', episode_util_return, 'Done:', done , '}')
                    break

            advantages = agent.update_value(transition_dict)
            old_log_probs_list, log_probs_list = agent.calc_log_probs(transition_dict)
            single_traj_grads = agent.compute_grads(advantages, old_log_probs_list, log_probs_list)
            single_traj_grads = [obj_grad + util_grad * agent.dual_param for obj_grad, util_grad in zip(*single_traj_grads)]
            single_traj_grads = torch.stack(single_traj_grads, dim=0)
            minibatch_grads_n.append(single_traj_grads)

        minibatch_grads_n = torch.stack(minibatch_grads_n, dim=0)
        avg_grads_n = torch.mean(minibatch_grads_n, dim=0)  # grads for the i-th agent and its actors
        prev_v_list = copy.deepcopy(avg_grads_n)
        y_list = copy.deepcopy(prev_v_list)
        prev_v_lists.append(prev_v_list)
        y_lists.append(y_list)
        if algo == 'npg':
            states_lists.append(states_list)

    consensus_y_lists = take_grad_consensus(y_lists, pi)

    if algo == 'npg':
        update_grad_lists = []
        for cons_y_list, agent, states_list in zip(consensus_y_lists, agents, states_lists):
            direction_grad_list = agent.compute_precondition_with_y(states_list, cons_y_list)
            update_grad_lists.append(direction_grad_list)
        consensus_grad_lists = take_grad_consensus(update_grad_lists, pi)
    else:
        consensus_grad_lists = copy.deepcopy(consensus_y_lists)

    agents = take_param_consensus(agents, pi)

    for agent, grad_list in zip(agents, consensus_grad_lists):
        update_param(agent, grad_list, lr=lr, clip_grad=clip_grad)

    return prev_v_lists, consensus_y_lists


    

    
